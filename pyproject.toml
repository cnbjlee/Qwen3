[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qwen3"
version = "3.2507.0"
description = "A unified Python library for Qwen3 model inference, training, and deployment"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Qwen Team", email = "qwen@alibaba-inc.com"}
]
keywords = ["transformers", "language-model", "inference", "deployment"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"

dependencies = [
    "torch>=2.0.0",
    "transformers>=4.51.0",
    "tokenizers>=0.15.0",
    "numpy>=1.21.0",
    "pyyaml>=6.0",
    "tqdm>=4.64.0",
    "psutil>=5.9.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
# Inference engines
vllm = [
    "vllm>=0.9.0",
]
sglang = [
    "sglang>=0.4.6.post1",
]
tensorrt = [
    "tensorrt-llm>=0.20.0rc3",
]

# Training frameworks
training = [
    "deepspeed>=0.14.2",
    "peft>=0.11.1",
    "datasets>=2.14.0",
    "accelerate>=0.24.0",
]

# Quantization
quantization = [
    "auto-gptq>=0.7.1",
    "autoawq>=0.2.5",
    "optimum>=1.20.0",
]

# Local deployment
local = [
    "llama-cpp-python>=0.2.0",
]

# Monitoring
monitoring = [
    "prometheus-client>=0.17.0",
    "grafana-client>=1.0.0",
    "pynvml>=11.5.0",
]

# Deployment
deployment = [
    "docker>=6.0.0",
    "kubernetes>=28.0.0",
]

# Development
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

# Documentation
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

# All dependencies
all = [
    "qwen3[vllm,sglang,training,quantization,local,monitoring,deployment]",
]

[project.urls]
Homepage = "https://github.com/QwenLM/Qwen3"
Documentation = "https://qwen.readthedocs.io/"
Repository = "https://github.com/QwenLM/Qwen3"
Issues = "https://github.com/QwenLM/Qwen3/issues"

[project.scripts]
qwen3 = "qwen3.cli:main"
qwen3-deploy = "qwen3.deployment:main"
qwen3-eval = "qwen3.evaluation:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["qwen3*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
qwen3 = ["py.typed", "*.yaml", "*.json"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["qwen3"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "vllm.*",
    "sglang.*",
    "docker.*",
    "pynvml.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.4"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=qwen3",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["qwen3"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]